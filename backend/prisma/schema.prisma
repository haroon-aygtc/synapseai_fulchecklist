// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPER_ADMIN
  ORG_ADMIN
  DEVELOPER
  VIEWER
}

enum ProviderType {
  OPENAI
  CLAUDE
  GEMINI
  MISTRAL
  GROQ
  OLLAMA
  CUSTOM
}

enum ProviderStatus {
  ACTIVE
  INACTIVE
  ERROR
  MAINTENANCE
}

model Organization {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  settings  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  members   OrganizationMember[]
  agents    Agent[]
  tools     Tool[]
  workflows Workflow[]
  providers Provider[]

  @@map("organizations")
}

model User {
  id                        String    @id @default(cuid())
  email                     String    @unique
  password                  String
  firstName                 String
  lastName                  String
  isActive                  Boolean   @default(true)
  isEmailVerified           Boolean   @default(false)
  emailVerificationToken    String?
  emailVerificationExpires  DateTime?
  passwordResetToken        String?
  passwordResetExpires      DateTime?
  twoFactorEnabled          Boolean   @default(false)
  twoFactorSecret           String?
  backupCodes               String[]  @default([])
  lastLoginAt               DateTime?
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @default(now())

  // Relations
  organizationMemberships OrganizationMember[]
  createdAgents           Agent[]              @relation("AgentCreator")
  createdTools            Tool[]               @relation("ToolCreator")
  createdWorkflows        Workflow[]           @relation("WorkflowCreator")
  auditLogs               AuditLog[]

  @@map("users")
}

model OrganizationMember {
  id             String   @id @default(cuid())
  organizationId String
  userId         String
  role           Role     @default(VIEWER)
  permissions    String[] @default([])
  isActive       Boolean  @default(true)
  joinedAt       DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId])
  @@map("organization_members")
}

model AuditLog {
  id             String   @id @default(cuid())
  action         String
  resource       String
  resourceId     String?
  details        Json?
  ipAddress      String?
  userAgent      String?
  organizationId String?
  createdAt      DateTime @default(now())

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("audit_logs")
}

model Provider {
  id                String         @id @default(cuid())
  name              String
  type              ProviderType
  status            ProviderStatus @default(ACTIVE)
  configuration     Json           // Encrypted configuration
  capabilities      String[]       @default([])
  priority          Int            @default(0)
  rateLimits        Json?
  costPerToken      Float?
  healthCheckUrl    String?
  lastHealthCheck   DateTime?
  isHealthy         Boolean        @default(true)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @default(now())

  // Relations
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  agents    Agent[]
  executions WorkflowExecution[]

  @@map("providers")
}

model Agent {
  id            String   @id @default(cuid())
  name          String
  description   String?
  type          String   // standalone, tool-driven, hybrid, etc.
  configuration Json
  isActive      Boolean  @default(true)
  version       String   @default("1.0.0")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  creatorId String
  creator   User   @relation("AgentCreator", fields: [creatorId], references: [id])
  
  providerId String?
  provider   Provider? @relation(fields: [providerId], references: [id])
  
  workflowNodes WorkflowNode[]
  sessions      AgentSession[]

  @@map("agents")
}

model AgentSession {
  id        String   @id @default(cuid())
  sessionId String   @unique
  context   Json     @default("{}")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  agentId String
  agent   Agent  @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@map("agent_sessions")
}

model Tool {
  id            String   @id @default(cuid())
  name          String
  description   String?
  type          String   // function-caller, rest-api, rag-retrieval, etc.
  configuration Json
  schema        Json     // Input/output schema
  isActive      Boolean  @default(true)
  version       String   @default("1.0.0")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  creatorId String
  creator   User   @relation("ToolCreator", fields: [creatorId], references: [id])
  
  workflowNodes WorkflowNode[]

  @@map("tools")
}

model Workflow {
  id          String   @id @default(cuid())
  name        String
  description String?
  definition  Json     // Workflow graph definition
  isActive    Boolean  @default(true)
  version     String   @default("1.0.0")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  creatorId String
  creator   User   @relation("WorkflowCreator", fields: [creatorId], references: [id])
  
  nodes      WorkflowNode[]
  executions WorkflowExecution[]

  @@map("workflows")
}

model WorkflowNode {
  id            String   @id @default(cuid())
  nodeId        String   // Unique within workflow
  type          String   // agent, tool, condition, loop, etc.
  position      Json     // x, y coordinates
  configuration Json
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  workflowId String
  workflow   Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  
  agentId String?
  agent   Agent?  @relation(fields: [agentId], references: [id])
  
  toolId String?
  tool   Tool?   @relation(fields: [toolId], references: [id])

  @@unique([workflowId, nodeId])
  @@map("workflow_nodes")
}

model WorkflowExecution {
  id          String   @id @default(cuid())
  status      String   // running, completed, failed, cancelled
  input       Json?
  output      Json?
  error       String?
  startedAt   DateTime @default(now())
  completedAt DateTime?
  duration    Int?     // milliseconds

  // Relations
  workflowId String
  workflow   Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  
  providerId String?
  provider   Provider? @relation(fields: [providerId], references: [id])

  @@map("workflow_executions")
}